// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./Ownable.sol";

contract LuceroCharacterSkin is ERC20, Ownable {

    mapping(uint256 => uint256) public SkinCharacterId;
    mapping(address => mapping(uint256 => uint256)) public redeemedSkin;

    event ItemRedeemed(address indexed player, uint256 indexed SkinId, uint256 diasAmount);
    event SkinDelivered(address indexed player, uint256 indexed SkinId);

    constructor(address initialOwner) ERC20("Diamond", "DIAS") {
        _mint(initialOwner, 3000); 

        SkinCharacterId[11] = 1000; // Item 11: Jawhead The Nutcracker, Dias = 1000 Value 
        SkinCharacterId[22] = 1500; // Item 22: Leomord Inferno Soul, Dias = 1500 Value 
        SkinCharacterId[33] = 2000; // Item 33: Mathilda Dream Groove, Dias = 2000 Value 
        SkinCharacterId[44] = 2500; // Item 44: Khufra Volcanic Overlord, Dias = 2500 Value 
        SkinCharacterId[55] = 3000; // Item 55: Gusion Dimension Walker, Dias = 3000 Value 
    }

    function mint(address Account, uint256 diasAmount) external onlyOwner {
        _mint(Account, diasAmount);
    }
    
    function destroy(uint256 diasAmount) external {
        _burn(msg.sender, diasAmount);
    }

    function transfer(address rogelio, uint256 diasAmount) public override returns (bool) {
        _transfer(_msgSender(), rogelio, diasAmount);
        return true;
    }

    function setSkinCharacterId(uint256 SkinId, uint256 diasAmount) external onlyOwner {
        SkinCharacterId[SkinId] = diasAmount;
    }

    function redeemSkin(uint256 SkinId) public returns (uint256) {
        uint256 amount = SkinCharacterId[SkinId];
        require(amount > 0, "Invalid Skin ID or Skin not for sale");
        require(balanceOf(msg.sender) >= amount, "Insufficient Dias");
        require(redeemedSkin[msg.sender][SkinId] == 0, "Skin already redeemed");

        _transfer(msg.sender, Owner, amount); 
        redeemedSkin[msg.sender][SkinId] = amount;
        emit ItemRedeemed(msg.sender, SkinId, amount);
        emit SkinDelivered(msg.sender, SkinId);

        return amount;
    }

    function redeemBalance(address player, uint256 SkinId) public view returns (uint256) {
        return redeemedSkin[player][SkinId];
    }

    function balanceOf(address account) public view override returns (uint256) {
        return super.balanceOf(account);
    }
}
